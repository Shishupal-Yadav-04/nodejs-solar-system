name: Solar System Planets Workflow

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
      - 'feature/*'

env:
  # Construct Mongo URI dynamically from variables + secrets
  MONGO_URI: "mongodb+srv://${{ vars.MONGO_USERNAME }}:${{ secrets.MONGO_PASSWORD }}@${{ vars.CLUSTER_NAME }}.mongodb.net/${{ vars.DB_NAME }}?retryWrites=true&w=majority"
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
  DB_NAME: ${{ vars.DB_NAME }}

jobs:
  unit-testing:
    name: Unit Testing
    services:
      mongo-db:
        image: shishupal123/nodejs-solar-system
        ports:
          - 27017:27017
    env:
  # Construct Mongo URI dynamically from variables + secrets
    #  MONGO_URI: "mongodb//localhost:27017/${{ vars.DB_NAME }}?retryWrites=true&w=majority"
     MONGO_URI: "mongodb//localhost:27017/superData"
     MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
     MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
   
    
    strategy:
      matrix:
        nodejs-version: ['18','19','20']
        operting-system: [ubuntu-latest,  macos-latest]
        exclude:
          - nodejs-version: '18'
            operting-system: macos-latest   # Node 20 not supported on macOS runners yet

    runs-on: ${{ matrix.operting-system }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js $${{ matrix.nodejs-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.nodejs-version }}
          cache: 'npm'

      - name: Show environment info (safe values only)
        run: |
          echo "MONGO_USERNAME: $MONGO_USERNAME"
          echo "CLUSTER_NAME: $CLUSTER_NAME"
          echo "DB_NAME: $DB_NAME"
        # Avoid printing MONGO_URI or password for security

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ matrix.nodejs-version }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        env:
          MONGO_URI: ${{ env.MONGO_URI }}
        run: npm test

      - name: Archive Test Results 
        uses: actions/upload-artifact@v4
        with:
          name: my-artifact-${{ matrix.nodejs-version }}-$${{ matrix.operting-system }}
          path: test-results.xml
          retention-days: 1

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    # needs: unit-testing
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # cache: 'npm'

      
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ matrix.nodejs-version }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm install

      - name: Run code coverage
        continue-on-error: true
        env:
          MONGO_URI: ${{ env.MONGO_URI }}
        run: npm run coverage

      - name: Upload code coverage report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report-${{ github.run_id }}
          path: coverage # The Folder containing coverage reports
          retention-days: 4

  docker:
    name: Containerization with Docker
    needs: [unit-testing, code-coverage]
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: GHCR Login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build Testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/nodejs-solar-system:${{ github.sha }}

      - name: Docker Image Test
        run: |
          docker images

          docker pull ${{ vars.DOCKERHUB_USERNAME }}/nodejs-solar-system:${{ github.sha }}

          docker run --name solar-sysem-app -d  \
           -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{vars.DOCKERHUB_USERNAME}}/nodejs-solar-system:${{ github.sha }}

          export IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-sysem-app)
          echo "Container IP Address: $IP"
          sleep 20  # Wait for the container to start
          echo Testing Image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep live


      - name: Container Registry Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/nodejs-solar-system:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/nodejs-solar-system:${{ github.sha }}